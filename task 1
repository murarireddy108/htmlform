                                                              TASK-1


                                                              HTTP1.1
1. In the earliest phase (HTTP/0.9), the HTTP protocol did not use headers and only transmitted plain HTML files. It was a one-line protocol only supporting the GET method.As the need to exchange more than just plain HTML emerged along with the client and server applications becoming more mature,to overcome HTTP/1.0 (between 1991-1996) introduced several new features.
 
2. HTTP/1.1, the first standardized version of HTTP, was introduced in 1997. It presented significant performance optimizations (over HTTP/0.9 and HTTP/1.0) and transformed the way requests and responses were exchanged between clients and servers.

3.  The concept of headers both for requests (from the client machine) as well as responses (from servers)    was introduced. The use of headers such as GET, POST, HEAD added extended flexibility, none of which was possible with the earlier version.

4.It allowed a single request/response for every TCP connection.

5. Status codes were used to indicate successful requests and to indicate transmission errors.

6.HTTP/1.1 provided support for chunk transfers that allowed streaming of content dynamically as chunks and for additional headers to be sent after the message body. This enhancement was particularly useful in cases where values of a field remained unknown until the content had been produced. For example, when the content had to be digitally signed, it was not possible to do so before the entire content gets generated.  
                                                                                                                           
6.  Other features that reinforced its stability were introduced such as:pipelining (the second request is sent before the response to the first is adequately served),content negotiation (an exchange between client and server to determine the media type, it also provides the provision to serve different versions of a resource at the same URI),cache control (used to specify caching policies in both requests and responses).


                                                                  HTTP/2


1. At the beginning of 2010, Google introduced an experimental protocol, SPDY, which supported multiplexing (multiple requests/responses sent and received asynchronously over a single TCP connection) but as it gained traction IETF’s HTTP Working Group came up with HTTP/2 in 2015, which is based on the SPDY protocol.

2. It introduces the concept of a server push where the server anticipates the resources that will be required by the client and pushes them prior to the client making requests. The client retains the authority to deny the server push; however, in most cases, this feature adds a lot of efficiency to the process.

3. Introduces the concept of multiplexing that interleaves the requests and responses without head-of-line blocking and does so over a single TCP connection.

4. It is a binary protocol i.e. only binary commands in the form of 0s and 1s are transmitted over the wire. The binary framing layer divides the message into frames that are segregated based on their type – Data or Header. This feature greatly increases efficiency in terms of security, compression and multiplexing.

5. HTTP/2 uses HPACK header compression algorithm that is resilient to attacks like CRIME and utilizes static Huffman encoding.

6. Though security is still not mandatory, it is mostly encrypted (though it is not enforced) since almost all clients require traffic to be encrypted. It also has some minimum standards, such as minimum key size for encryption. TLS 1.2 etc.
